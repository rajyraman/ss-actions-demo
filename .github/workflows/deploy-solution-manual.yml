name: deploy-solution-manual

on:
  workflow_dispatch:
    inputs:
      applicationId:
        description: "Application Id"
        required: true
        default: "f0a39d99-08df-492d-9c84-ecc22aaa064a"
      environmentUrl:
        description: "Environment URL"
        required: true
        default: "https://dreamingincrmsandbox.crm6.dynamics.com"
      tenantId:
        description: "Tenant Id"
        required: true
        default: '6698ac31-e602-4f64-ac1f-472ae585c006'        
      solutionType:
        description: "Managed or Unmanaged?"
        required: true
        default: "Managed"
      solution:
        description: "Solution to import"
        required: true
        default: "GitHubSolution"
jobs:
  build:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2

      - id: who-am-i
        name: Connecting to ${{ github.event.inputs.environmentUrl }} as ${{ github.event.inputs.applicationId }}
        uses: microsoft/powerplatform-actions/who-am-i@main
        with:
          environment-url: ${{ github.event.inputs.environmentUrl }}        
          app-id: ${{ github.event.inputs.applicationId }}
          client-secret: ${{ secrets.dataversesecret }}
          tenant-id: ${{ github.event.inputs.tenantId }}

      - id: pack-solution
        name: Build ${{ github.event.inputs.solution }} as ${{ github.event.inputs.solutionType }} Solution
        uses: microsoft/powerplatform-actions/pack-solution@main
        with:
          solution-file: "out/${{ github.event.inputs.solution }}.zip"
          solution-folder: "Solutions/${{ github.event.inputs.solution }}/src"
          solution-type: ${{ github.event.inputs.solutionType }}

      - id: solution-version
        name: Getting version information for ${{ github.event.inputs.solution }}
        uses: mavrosxristoforos/get-xml-info@1.0
        with:
          xml-file: "Solutions/${{ github.event.inputs.solution }}/src/Other/Solution.xml"
          xpath: "//ImportExportXml/SolutionManifest/Version"

      - uses: bobheadxi/deployments@master
        id: deployment
        with:
          step: start
          token: ${{ secrets.GITHUB_TOKEN }}
          transient: true
          env: PROD
          desc: Importing solution ${{ github.event.inputs.solution }}_managed_v${{ steps.solution-version.outputs.info }} into PROD..

      - id: check-solution-exists
        name: Check if ${{ github.event.inputs.solution }} solution exists
        shell: powershell
        run: |
          Install-Module -Name Microsoft.Xrm.Data.PowerShell -Confirm:$false -Force
          $conn = Get-CrmConnection -ConnectionString "AuthType=ClientSecret; Url=${{ github.event.inputs.environmentUrl }}; ClientId=${{ github.event.inputs.applicationId }}; ClientSecret=${{ secrets.dataversesecret }}"
          $solutions = Get-CrmRecordsByFetch -Fetch "<fetch><entity name='solution' ><attribute name='solutionid' /><attribute name='version' /><filter><condition attribute='uniquename' operator='eq' value='${{ github.event.inputs.solution }}' /></filter></entity></fetch>" -conn $conn
          if($solutions.Count -eq 0){
               echo "::set-output name=isHolding::false"
          }
          else {
             echo "::set-output name=isHolding::true"
          }

      - id: import-unmanaged-solution
        if: github.event.inputs.solutionType == 'Unmanaged'
        name: Importing Unmanaged ${{ github.event.inputs.solution }}.zip into ${{ github.event.inputs.environmentUrl }}
        uses: microsoft/powerplatform-actions/import-solution@main
        with:
          environment-url: ${{ github.event.inputs.environmentUrl }}        
          app-id: ${{ github.event.inputs.applicationId }}
          client-secret: ${{ secrets.dataversesecret }}
          tenant-id: ${{ github.event.inputs.tenantId }}
          solution-file: "out/${{ github.event.inputs.solution }}.zip"
          publish-changes: true
          activate-plugins: true
          run-asynchronously: true               

      - id: import-managed-solution
        if: github.event.inputs.solutionType == 'Managed'
        name: Importing Managed ${{ github.event.inputs.solution }}.zip into ${{ github.event.inputs.environmentUrl }}
        uses: microsoft/powerplatform-actions/import-solution@main
        with:
          environment-url: ${{ github.event.inputs.environmentUrl }}        
          app-id: ${{ github.event.inputs.applicationId }}
          client-secret: ${{ secrets.dataversesecret }}
          tenant-id: ${{ github.event.inputs.tenantId }}
          import-as-holding: ${{ steps.check-solution-exists.outputs.isHolding }}
          solution-file: "out/${{ github.event.inputs.solution }}.zip"
          activate-plugins: true
          run-asynchronously: true               

      - id: apply-solution-upgrade
        if: steps.check-solution-exists.outputs.isHolding == 'true' && github.event.inputs.solutionType == 'Managed'
        name: Applying Solution Upgrade for ${{ github.event.inputs.solution }}
        uses: microsoft/powerplatform-actions/upgrade-solution@main
        with:
          environment-url: ${{ github.event.inputs.environmentUrl }}        
          app-id: ${{ github.event.inputs.applicationId }}
          client-secret: ${{ secrets.dataversesecret }}
          tenant-id: ${{ github.event.inputs.tenantId }}
          solution-name: ${{ github.event.inputs.solution }}
          async: true
          max-async-wait-time: 120

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.solution-version.outputs.info }}
          release_name: ${{ github.event.inputs.solution }}_v${{ steps.solution-version.outputs.info }}
          draft: false
          prerelease: false

      - name: Upload Release Artifact
        id: upload-solution
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: "out/${{ github.event.inputs.solution }}.zip"
          asset_name: ${{ github.event.inputs.solution }}_v${{ steps.solution-version.outputs.info }}.zip
          asset_content_type: application/zip

      - name: Update deployment status
        uses: bobheadxi/deployments@master
        if: always()
        with:
          step: finish
          token: ${{ secrets.GITHUB_TOKEN }}
          desc: ${{ steps.solution-version.outputs.info }}
          status: ${{ job.status }}
          env: ${{ steps.deployment.outputs.env }}
          deployment_id: ${{ steps.deployment.outputs.deployment_id }}
